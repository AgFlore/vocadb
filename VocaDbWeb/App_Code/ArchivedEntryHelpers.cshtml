@using System.Web.Mvc.Html;
@using VocaDb.Model.DataContracts;
@using VocaDb.Model.DataContracts.Versioning
@using VocaDb.Model.Domain;
@using VocaDb.Model.Domain.Globalization
@using VocaDb.Web.Helpers;
@using VocaDb.Web.Models.Shared.Partials.ArchivedEntry;
@inherits VocaDb.Web.Code.HelperPage

@functions {
	public static HelperResult DataRow<T>(string name, T primary, T compared, Func<T, object> valGetter, bool preserveLineBreaks = false)
		where T : class {

		var val1 = valGetter(primary);
		var val2 = (compared != null ? valGetter(compared) : null);

		return DataRow(name, val1, val2, preserveLineBreaks);
		
    }

	public static HelperResult DataRow<T>(string name, ComparedVersionsContract<T> comparedVersions, Func<T, object> valGetter, bool preserveLineBreaks = false)
		where T : class {

		var val1 = valGetter(comparedVersions.FirstData);
		var val2 = (comparedVersions.SecondData != null ? valGetter(comparedVersions.SecondData) : null);

		return DataRow(name, val1, val2, preserveLineBreaks);

	}

	public static HelperResult DataRowList<T>(string name, T primary, T compared, Func<T, IEnumerable<IHtmlString>> valGetter)
		where T : class {

		var val1 = valGetter(primary);
		var val2 = (compared != null ? valGetter(compared) : null);

		return DataRowList(name, val1, val2);
			
	}

	public static HelperResult DataRowList<T>(string name, ComparedVersionsContract<T> comparedVersions, Func<T, IEnumerable<IHtmlString>> valGetter)
		where T : class {

		var val1 = valGetter(comparedVersions.FirstData);
		var val2 = (comparedVersions.SecondData != null ? valGetter(comparedVersions.SecondData) : null);

		return DataRowList(name, val1, val2);

	}
		
	public static string FormatReleaseDate(OptionalDateTimeContract contract) {
		return OptionalDateTime.ToDateTime(contract.Year, contract.Month, contract.Day).ToShortDateString();
	}

	public static HelperResult ObjectRefList<T>(string name, ComparedVersionsContract<T> comparedVersions, 
		Func<T, IEnumerable<ObjectRefContract>> valGetter) where T : class {
		
		return DataRowList(name, comparedVersions, d => DataFormatUtils.GenerateHtml(valGetter(d), objRef => Html.Partial("Partials/ArchivedEntry/_ObjectRefInfo", new ObjectRefInfoViewModel(objRef))));
		
	}

	public static HelperResult PictureRow<T>(string name, ComparedVersionsContract<T> comparedVersions, Func<int, string> urlGetter)
		where T : class {

		var val1 = urlGetter(comparedVersions.FirstId);
		var val2 = (comparedVersions.SecondId != 0 ? urlGetter(comparedVersions.SecondId) : null);

		return PictureRow(name, val1, val2);
				
	}
	
	public static HelperResult TranslatedNameRow<T>(ComparedVersionsContract<T> comparedVersions, Func<T, TranslatedStringContract> valGetter)
		where T : class {

		var val1 = valGetter(comparedVersions.FirstData);
		var val2 = comparedVersions.SecondData != null ? valGetter(comparedVersions.SecondData) : null;

		return TranslatedNameRow(val1, val2);
		
	}

	public static HelperResult TranslatedNameRow<T>(ComparedVersionsContract<T> comparedVersions, Func<T, ArchivedTranslatedStringContract> valGetter)
		where T : class {

		var val1 = valGetter(comparedVersions.FirstData);
		var val2 = comparedVersions.SecondData != null ? valGetter(comparedVersions.SecondData) : null;

		return TranslatedNameRow(val1, val2);

	}
	
}

@helper DataRow(string name, object val, object compareVal = null, bool preserveLineBreaks = false) {
	<tr class="@(compareVal != null && val != compareVal ? "changed" : "")">
		<td>@name</td>
		<td colspan="@(compareVal != null ? 1 : 2)" @Html.ConditionalAttribute(preserveLineBreaks, "class", "pre-line")>@val</td>
		@if (compareVal != null) {
		<td @Html.ConditionalAttribute(preserveLineBreaks, "class", "pre-line")>@compareVal</td>			
		}
	</tr>	
}

@helper DataRowList(string name, IEnumerable<IHtmlString> rows, IEnumerable<IHtmlString> compareRows = null) {
	if (rows != null) {
	<tr>
		<td>@name</td>
		<td colspan="@(compareRows != null ? 1 : 2)">
			<ul>
			@foreach (var row in rows) {
				var isNew = (compareRows != null && !compareRows.Any(r => row.ToString().Equals(r.ToString())));
				<li class="@(isNew ? "archived-entry-compare-modified" : "")">@row</li>
			}			
			</ul>
		</td>
		@if (compareRows != null) {
		<td>
				<ul>
				@foreach (var row in compareRows) {
					var isRemoved = !rows.Any(r => row.ToString().Equals(r.ToString()));
					<li class="@(isRemoved ? "archived-entry-compare-modified" : "")">@row</li>
				}			
				</ul>	
		</td>
		}		
	</tr>	
	}
}

@helper ObjectRefList(string name, IEnumerable<ObjectRefContract> objRefs) {
	@DataRowList(name, DataFormatUtils.GenerateHtml(objRefs, objRef => Html.Partial("Partials/ArchivedEntry/_ObjectRefInfo", new ObjectRefInfoViewModel(objRef))));
}

@helper PictureRow(string name, string url, string compareToUrl = null) {
	<tr>
		<td>@name</td>
		<td colspan="@(!string.IsNullOrEmpty(compareToUrl) ? 1 : 2)">
			<img src="@url" alt="@name" class="coverPic" />
		</td>
		@if (!string.IsNullOrEmpty(compareToUrl)) {
			<td>
				<img src="@compareToUrl" alt="@name" class="coverPic" />
			</td>
		}
	</tr>	

}

@helper TranslatedNameRow(TranslatedStringContract name, TranslatedStringContract compareToName = null) {
	<tr>
		<td>Original language:</td>
		<td colspan="@(compareToName != null ? 1 : 2)">
			@Translate.ContentLanguageSelectionName(name.DefaultLanguage)
		</td>
		@if (compareToName != null) {
			<td>			
				@Translate.ContentLanguageSelectionName(compareToName.DefaultLanguage)
			</td>
		}
	</tr>
	<tr>
		<td>Primary names</td>
		<td colspan="@(compareToName != null ? 1 : 2)">
			@Translate.ContentLanguageSelectionName(ContentLanguageSelection.Japanese): @name.Japanese<br />
			@Translate.ContentLanguageSelectionName(ContentLanguageSelection.Romaji): @name.Romaji<br />
			@Translate.ContentLanguageSelectionName(ContentLanguageSelection.English): @name.English<br />
		</td>
		@if (compareToName != null) {
			<td>			
				@(Translate.ContentLanguageSelectionName(ContentLanguageSelection.Japanese) + ": " + compareToName.Japanese)<br />
				@(Translate.ContentLanguageSelectionName(ContentLanguageSelection.Romaji) + ": " + compareToName.Romaji)<br />
				@(Translate.ContentLanguageSelectionName(ContentLanguageSelection.English) + ": " +  compareToName.English)<br />			
			</td>
		}
	</tr>
}

@helper TranslatedNameRow(ArchivedTranslatedStringContract name, ArchivedTranslatedStringContract compareToName = null) {
	<tr>
		<td>Original language</td>
		<td colspan="@(compareToName != null ? 1 : 2)">
			@(name != null ? Translate.ContentLanguageSelectionName(name.DefaultLanguage) : string.Empty)
		</td>
		@if (compareToName != null) {
			<td>			
				@Translate.ContentLanguageSelectionName(compareToName.DefaultLanguage)
			</td>
		}
	</tr>
	<tr>
		<td>Primary names</td>
		<td colspan="@(compareToName != null ? 1 : 2)">
			@if (name != null) {
				@:@Translate.ContentLanguageSelectionName(ContentLanguageSelection.Japanese): @name.Japanese<br />
				@:@Translate.ContentLanguageSelectionName(ContentLanguageSelection.Romaji): @name.Romaji<br />
				@:@Translate.ContentLanguageSelectionName(ContentLanguageSelection.English): @name.English<br />
			}
		</td>
		@if (compareToName != null) {
			<td>			
				@(Translate.ContentLanguageSelectionName(ContentLanguageSelection.Japanese) + ": " + compareToName.Japanese)<br />
				@(Translate.ContentLanguageSelectionName(ContentLanguageSelection.Romaji) + ": " + compareToName.Romaji)<br />
				@(Translate.ContentLanguageSelectionName(ContentLanguageSelection.English) + ": " +  compareToName.English)<br />
			</td>
		}
	</tr>
}
