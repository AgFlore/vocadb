@using System.Web.Mvc;
@using System.Web.Mvc.Html;
@using System.Web.Routing
@using VocaDb.Model.DataContracts.Artists;
@using VocaDb.Model.Domain.Artists
@using VocaDb.Model.Utils
@using VocaDb.Web.Helpers;
@using VocaDb.Model.DataContracts.Songs;
@inherits VocaDb.Web.Code.HelperPage

@helper ArtistGrid(IEnumerable<ArtistContract> artists, int columns,
	bool displayType = false) {
	
	<table>
		@{ int i = 0; }
	
		@foreach (var artist in artists) {
			if (i % columns == 0) {
				@Html.Raw("<tr>")
			}
			<td>
				@{ Html.RenderPartial("Partials/Artist/_ArtistIconLink", artist); }
			</td>
			<td>
				@ArtistLink(artist)
				@if (displayType) {
					@("(")@Translate.ArtistTypeName(artist.ArtistType)@(")")
				}
				@if (!string.IsNullOrEmpty(artist.AdditionalNames)) {
					<br />
					<span class="extraInfo">@artist.AdditionalNames</span>
				}
			</td>
			{ i++; }
			if (i % columns == 0) {
				@Html.Raw("</tr>")
			}
		}
		@if (i % columns != 0) {
			@Html.Raw("</tr>")
		}
	</table>
			
}

@helper ArtistLink(ArtistContract artist, bool typeLabel = false, string name = null, bool releaseYear = false) {
	if (typeLabel) {
		Html.RenderPartial("Partials/Artist/_ArtistTypeLabel", artist.ArtistType);
	}
	@Html.ActionLink(name ?? artist.Name, "Details", "Artist", new RouteValueDictionary { { "id", artist.Id } }, new Dictionary<string, object> { { "title", artist.AdditionalNames }, { "data-entry-id", artist.Id }, { "class", "artistLink" }})
	if (releaseYear && artist.ReleaseDate.HasValue) {<small class="muted">&nbsp;(@artist.ReleaseDate.Value.Year)</small>}
}
	
@helper ArtistLinkList(IEnumerable<ArtistContract> artists, bool typeLabel = false, bool releaseYear = false) {
	@Html.LinkList(artists, a => new MvcHtmlString(ArtistLink(a, typeLabel, releaseYear: releaseYear).ToString()))
}

@helper ArtistList(IEnumerable<IArtistLinkContract> artists, ShowRolesMode showRoles = ShowRolesMode.Never, bool showType = false) {
	var ordered = artists.OrderBy(a => a.IsSupport).ToArray();
	foreach (var artist in ordered) {
		if (artist.IsSupport) {
			@("(")
		}
		if (artist.Artist != null) {
			if (showType) {
				Html.RenderPartial("Partials/Artist/_ArtistTypeLabel", artist.Artist.ArtistType);
			}			
			@ArtistLink(artist.Artist, name: artist.Name)
		} else {
			@artist.Name
		}
		if (ShowRoles(artist, showRoles)) {
			@Html.Raw("&nbsp;<small class='muted'>(" + Translate.ArtistRoleNames.GetAllNameNames(artist.EffectiveRoles, ArtistRoles.Default) + ")</small>")
		}
		if (artist.IsSupport) {
			@(")")
		}
		if (artist != ordered.Last()) {
			@(", ")
		}
	}
}

@helper ArtistTypesDropdownKnockout(string binding) {
	<select data-bind="value: @(binding)">
		@foreach (var artistType in Translate.ArtistTypeNames.GetTranslatedFields(AppConfig.ArtistTypes)) {
			<option value="@artistType.Id">@artistType.Name</option>
		}
	</select>
}

@functions {
	public enum ShowRolesMode
	{
		Never,
		/// <summary>
		/// Show roles if role is not "Default"
		/// </summary>
		IfNotDefault,
		/// <summary>
		/// Show roles if role is not "Default" or "Vocalist"
		/// </summary>
		IfNotVocalist
	}

	public static bool ShowRoles(IArtistLinkContract artist, ShowRolesMode showRoles)
	{
		switch (showRoles)
		{
			case ShowRolesMode.IfNotDefault:
				return artist.EffectiveRoles != ArtistRoles.Default;
			case ShowRolesMode.IfNotVocalist:
				return artist.EffectiveRoles != ArtistRoles.Default
					&& artist.EffectiveRoles != ArtistRoles.Vocalist
					&& !artist.Categories.HasFlag(ArtistCategories.Subject)
					&& !artist.Categories.HasFlag(ArtistCategories.Producer);
			default:
				return false;
		}
	}
}