@using VocaDb.Model.DataContracts
@using VocaDb.Model.DataContracts.Api
@using VocaDb.Model.DataContracts.Comments
@using VocaDb.Web.Helpers
@using VocaDb.Web.Code
@inherits VocaDb.Web.Code.HelperPage

@helper CommentBodyKnockout(string messageBinding, bool allowMarkdown, string deleteHandler = "$parent.deleteComment", string editHandler = null,
	bool standalone = true) {
	<div class="comment media @(standalone ? "comment-large" : "")">
		<a data-bind="attr: { href: '/User/Profile/' + author.name }" class="pull-left">
			@UserHelpers.ProfileIconKnockout("author.iconUrl", 70)
		</a>

		<div class="media-body">
			<h3 class="media-heading comment-large-header">
				<a data-bind="attr: { href: '/User/Profile/' + author.name }, text: author.name"></a>
				<small class="extraInfo pull-right">
					<span data-bind="timeAgo: created"></span>
					
					@if (editHandler != null) {
						<!-- ko if: $data.canBeEdited -->
						@:&nbsp;&nbsp;
						<a data-bind="click: function() { @(editHandler)($data); }" href="#" class="textLink editLink">@ViewRes.SharedStrings.Edit</a>
						<!-- /ko -->
					}

					<!-- ko if: $data.canBeDeleted -->
					&nbsp;&nbsp;
					<a data-bind="confirmClick: { message: 'Are you sure you want to delete this comment?', click: function() { @(deleteHandler)($data); } }" href="#" class="textLink deleteLink">@ViewRes.SharedStrings.Delete</a>
					<!-- /ko -->
				</small>
			</h3>
			@if (allowMarkdown) {
				<p data-bind="markdown: @messageBinding"></p>
			} else {
				<p data-bind="text: @messageBinding"></p>
			}
		</div>
	</div>
}

@helper CommentBodyLarge(CommentContract contract, bool allowDelete, bool alwaysAllowDelete = false) {
	<div class="comment media comment-large">
		<a class="pull-left" href="@Url.Action("Profile", "User", new { id = contract.Author.Name })">
			@UserHelpers.ProfileIcon(contract.Author, 70)
		</a>
			
		<div class="media-body">
			<h3 class="media-heading comment-large-header">
				@UserHelpers.UserLink(contract.Author)
				<small class="extraInfo pull-right">
					@TimeAgoStringBuilder.FormatTimeAgo(contract.Created)
					@if (alwaysAllowDelete || (allowDelete && Login.CanDeleteComment(contract))) {
						@Html.Raw("&nbsp;&nbsp;");
						<a href="#" id="deleteComment_@(contract.Id)" class="deleteComment textLink deleteLink">@ViewRes.SharedStrings.Delete</a>
					}
				</small>
			</h3>
			<p>
				@Helpers.ConvertNewlinesToBreaks(contract.Message)
			</p>			
		</div>
	</div>		
}

@helper CommentEntryItem(EntryForApiContract entry) {
		
	var thumbUrl = (entry.MainPicture != null ? entry.MainPicture.UrlTinyThumb : null);
	
	<div class="media">
		@if (!string.IsNullOrEmpty(thumbUrl)) {
		<a class="pull-left" href="@EntryLinkFactory.GetFullEntryUrl(entry.EntryType, entry.Id)" title="@entry.AdditionalNames">
			<img src="@thumbUrl" alt="thumb" class="coverPicThumb" />
		</a>
		}
		
		<div class="media-body">
			<h4 class="media-heading">
				<a href="@EntryLinkFactory.GetFullEntryUrl(entry.EntryType, entry.Id)" title="@entry.AdditionalNames">
					@entry.Name
				</a>
			</h4>
			@if (!string.IsNullOrEmpty(entry.ArtistString)) {
				<span>@entry.ArtistString</span>
			}
		</div>
	</div>
		
}

@helper CommentWithEntryVertical(EntryWithCommentsContract entry) {

	<div class="well well-transparent">
		@CommentEntryItem(entry.Entry)
		@foreach (var comment in entry.Comments) {
			@PrintComment(comment, false)
			if (comment != entry.Comments.Last()) {
				<hr />
			}
		}
	</div>

}

@helper EditableComments(bool allowCreateComment, bool well = true) {

	var cssClass = (well ? "well well-transparent" : "standalone");

	<!-- binding context: EditableCommentsViewModel -->

	if (allowCreateComment) {
		<div class="create-comment @cssClass">
			<form data-bind="submit: createComment">
				<textarea data-bind="textInput: newComment" rows="6" cols="60" maxlength="800" class="span5" placeholder="@ViewRes.DiscussionContentStrings.NewComment" required></textarea>
				<button type="submit" class="btn btn-primary">@ViewRes.DiscussionContentStrings.AddComment</button>
			</form>
		</div>
	}

	<div data-bind="foreach: comments">
		<div class="editable-comment @cssClass">
			<div data-bind="visible: $parent.editCommentModel() !== $data">
				@CommentBodyKnockout("message", false, editHandler: "$parent.beginEditComment", standalone: !well)
			</div>
			<form data-bind="visible: $parent.editCommentModel() === $data, submit: $parent.saveEditedComment">
				<textarea data-bind="textInput: editedMessage" rows="6" cols="60" maxlength="800" class="span5" required></textarea>
				<button type="submit" class="btn btn-primary">@ViewRes.SharedStrings.Save</button>
				<button data-bind="click: $parent.cancelEditComment" class="btn">Cancel</button>
			</form>
		</div>
	</div>

}

@helper PrintComment(CommentContract contract, bool allowDelete, bool alwaysAllowDelete = false) {	
	<div class="comment">
		<h3>
			@UserHelpers.UserIconLink(contract.Author, 25)

			@if (alwaysAllowDelete || (allowDelete && Login.CanDeleteComment(contract))) {
				<text>-</text> <a href="#" id="deleteComment_@(contract.Id)" class="deleteComment">@ViewRes.SharedStrings.Delete</a>
			}
			<small class="pull-right extraInfo">
				@TimeAgoStringBuilder.FormatTimeAgo(contract.Created)
			</small>		
		</h3>
		<p>
			@Helpers.ConvertNewlinesToBreaks(contract.Message)
		</p>
	</div>	
}