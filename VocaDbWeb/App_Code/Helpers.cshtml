@inherits VocaDb.Web.Code.HelperPage
@using System.Web.Mvc.Html;
@using System.Web.Routing
@using VocaDb.Model
@using VocaDb.Model.Helpers
@using VocaDb.Model.DataContracts
@using VocaDb.Model.Domain.PVs
@using VocaDb.Model.Utils
@using VocaDb.Web.Helpers;
@using VocaDb.Web.Models.Shared.Partials.PV;
@using VocaDb.Web.Models.Shared.Partials.Shared;

@functions {

	static string GetAbsoluteUrl(string relative) {
		return UrlMapper.FullAbsolute(relative);
	}

}

@helper AjaxLoader() {
	<img src="@Url.Content("~/Content/ajax-loader.gif")" alt="loading..." />
}

@helper AjaxLoader(string id) {
	<img id="@id" src="@Url.Content("~/Content/ajax-loader.gif")" alt="loading..." style="display:none;" />
}

@helper EntryLink(EntryRefWithNameContract entryRef) {
	@Html.ActionLink(entryRef.Name.DisplayName, "Details", entryRef.EntryType.ToString(), new RouteValueDictionary { { "id", entryRef.Id } }, new Dictionary<string, object> { { "title", entryRef.Name.AdditionalNames }, { "data-entry-id", entryRef.Id } })
}

@helper EntryLink(EntryBaseContract entry) {
	@Html.ActionLink(entry.DefaultName, "Details", entry.EntryType.ToString(), new { id = entry.Id }, null)	
}


@helper FormatPVLink(VocaDb.Model.DataContracts.PVs.PVContract pv, bool type = true) {
	<a href="@pv.Url"><img src="@Html.VideoServiceLinkUrl(pv.Service)" alt="@pv.Service" /> @(!string.IsNullOrEmpty(pv.Name) ? pv.Name : pv.Service.ToString())
	@if (type) {
		@("(" + Translate.PVTypeNames[pv.PVType] + ")")
 }
	</a>
}

@helper PVServiceIcon(PVService service) {
    
	var iconUrl = @Html.VideoServiceLinkUrl(service);
        
	<img src="@iconUrl" alt="@service.ToString()" title="@service.ToString()" />
    
}

@helper PVServiceIcons(PVServices services) {
    
	foreach (var service in EnumVal<PVService>.Values.Where(service => services.HasFlag((PVServices)service))) {
        @PVServiceIcon(service)           
	}
    
}

@helper ReCaptcha2() {
	<div class="g-recaptcha" data-sitekey="@AppConfig.ReCAPTCHAPublicKey"></div>
}

@helper RequiredField() {
	<span class="required-field">*</span>	
}

@helper Stars(int current, int max) {
	for (int i = 1; i <= max; ++i) {
		if (current >= i) {
			<img src="@GetAbsoluteUrl(Url.Content("~/Content/star.png"))" alt="*" />
		} else {
			<img src="@GetAbsoluteUrl(Url.Content("~/Content/star_disabled.png"))" alt="" />
		}
	}
}

@helper Stars(double current, int max) {
	<span title="@Math.Round(current, 2)">
		@Stars((int)Math.Round(current, MidpointRounding.AwayFromZero), max)
	</span>
}

@helper StarsMeta(int current, int max) {
	for (int i = 1; i <= max; ++i) {
		if (current >= i) {
			<img class="rating" src="@Url.Content("~/Content/star.png")" alt="@current" />
		} else {
			<img class="rating" src="@Url.Content("~/Content/star_disabled.png")" alt="@current" />
		}
	}
}

@helper StarsMeta(double current, int max) {
	<span title="@NumberFormatHelper.DecimalDot(Math.Round(current, 2))">
        @StarsMeta((int)Math.Round(current, MidpointRounding.AwayFromZero), max)
	</span>
}


@helper UniversalTimeLabel(DateTime dateTime) {
	<span title="UTC">@dateTime.ToUniversalTime()</span>
}

@helper ValidationSymmaryDiv(string message) {
	Html.RenderPartial("Partials/Shared/_ValidationSummaryPanel", new ValidationSummaryPanelViewModel(message));
}
