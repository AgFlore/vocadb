@using System.Web.Optimization
@using VocaDb.Model.Domain.Images
@using VocaDb.Web.Helpers;
@using Res = VocaDb.Web.Resources.Views.Tag.EditStrings;
@inherits VocaDb.Web.Code.VocaDbPage<VocaDb.Web.Models.Tag.TagEdit>

@{
	PageProperties.Title = "Edit tag - " + Model.Name;
	ViewBag.Parents = new[] {
		Html.ActionLink("Tags", "Index"),
		Html.ActionLink(Model.Name, "Details", new { id = Model.Name })
	};

	var thumbUrl = Url.EntryImageOld(Model.Thumb, ImageSize.SmallThumb);

	var validationErrors = new Dictionary<string, string> {
		{ "validationError_needDescription", Res.ValidationNeedDescription }
	};

}

@section BodyScripts {
@Scripts.Render("~/bundles/shared/edit", "~/bundles/Tag/Edit")
<script type="text/javascript">

	$(document).ready(function () {
		
		initPage();

		var tagRepo = new vdb.repositories.TagRepository('@RootPath');
		tagRepo.getByName('@Model.Name', "Description", function (contract) {
			var viewModel = new vdb.viewModels.TagEditViewModel(contract);
			ko.applyBindings(viewModel);
		});
		
	});

</script>
}

@section Toolbar {
@if (Login.CanDeleteEntries && Model.IsEmpty) {
	@Html.ActionLink("Delete", "Delete", new { id = Model.Name }, new { id = "deleteLink", onclick = "return confirm(\"Are you sure you want to delete this tag?\");" })
}
}

@KnockoutHelpers.EntryValidationMessage(Model.Draft, validationErrors, null)

<br />
<form action="@Url.Action("Edit", "Tag")" method="POST" enctype="multipart/form-data" data-bind="submit: submit">

	@Html.HiddenFor(m => m.Name)

	<div class="alert" data-bind="visible: aliasedToName() && parentName()" style="display: none;">
		<span class="icon-line errorIcon"></span>
		Both "Aliased to" and "Parent" are specified.
		Most of the time this doesn't make sense.
		If you're unsure, check the documentation.
	</div>

	@Helpers.SaveAndBackBtn(Url.Action("Details", new { id = Model.Name }))

	<div class="editor-label">
		@Html.LabelFor(m => m.CategoryName)
	</div>
	<div class="editor-field">
		@Html.TextBoxForKnockout(m => m.CategoryName, "textInput: categoryName, tagCategoryAutoComplete: categoryName", maxLength: 30)
		@Html.ValidationMessageFor(m => m.CategoryName)
	</div>

	<div class="editor-label">
		<label for="aliasedTo" class="helpTip" title="If specified, makes this tag an alias of another tag. Alias means an alternative name, for example 'dnb' and 'drumnbass'.">Aliased to</label>
	</div>
	<div class="editor-field">
		@KnockoutHelpers.LockingAutoComplete("tagAutoComplete", "aliasedToName", extraBindings: "tagFilter: denySelf, clearValue: true, allowAliases: false")
		@Html.HiddenForKnockout(m => m.AliasedTo, "value: aliasedToName")
	</div>

	<div class="editor-label">
		<label for="parent" class="helpTip" title="Parent tag groups related tags under one parent. Child tags are still considered separate, unlike aliases.">Parent</label>
	</div>
	<div class="editor-field">
		@KnockoutHelpers.LockingAutoComplete("tagAutoComplete", "parentName", extraBindings: "tagFilter: denySelf, clearValue: true, allowAliases: false")
		@Html.HiddenForKnockout(m => m.Parent, "value: parentName")
	</div>

	<div class="editor-label">
		@Html.LabelFor(m => m.Description)
		@Helpers.MarkdownNotice()
	</div>
	<div class="editor-field">
		@Html.TextAreaForKnockout(m => m.Description, binding: "textInput: description", cssClass: "span6", maxLength: 1000, rows: 8, cols: 50)
		@Html.ValidationMessageFor(m => m.Description)

		Live preview
		<div data-bind="markdown: description"></div>
		<br />
	</div>

	<div class="editor-label">
		Thumbnail
	</div>
	<div class="editor-field">
		<div class="media">
			@if (!string.IsNullOrEmpty(thumbUrl)) {
				<img class="pull-left media-object" src="@thumbUrl" alt="Thumb" />
			}
			<div class="media-body">
				@Helpers.ImageUploadMessage()
				<input type="file" id="thumbPicUpload" name="thumbPicUpload" />
			</div>
		</div>
	</div>

	<div class="editor-label">
		@Helpers.HelpLabel("Entry status", Resources.CommonMessages.EntryStatusExplanation)
	</div>
	<div class="editor-field">
		@Html.EnumDropDownListFor(m => m.Status, Translate.EntryStatusNames.GetValuesAndNames(Model.AllowedEntryStatuses))
	</div>

	<br />
	@Helpers.SaveAndBackBtn(Url.Action("Details", new { id = Model.Name }))

</form>