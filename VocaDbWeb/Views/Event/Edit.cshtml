@using System.Web.Optimization
@using VocaDb.Model.Helpers
@using VocaDb.Web.Helpers
@using EditRes = ViewRes.EntryEditStrings
@inherits VocaDb.Web.Code.VocaDbPage<VocaDb.Web.Models.Event.EventEdit>

@{

	var isNew = (Model.Id == 0);
	string backAction;

	if (!isNew) {
		PageProperties.Title = "Edit event - " + Model.OldName;
		backAction = Url.Action("Details", new { id = Model.Id, slug = Model.UrlSlug });
		ViewBag.Parents = new[] {
			Html.ActionLink("Events", "EventsBySeries"),
			Html.ActionLink(Model.OldName, "Details", new { id = Model.Id, slug = Model.UrlSlug })
		};
	} else {
		PageProperties.Title = "Create a new event";
		backAction = Url.Action("EventsBySeries");
		ViewBag.Parents = new[] {
			Html.ActionLink("Events", "EventsBySeries")
		};
	}

}

@section Toolbar {
	@if (!isNew && Login.CanDeleteEntries) {
		@Html.ActionLink("Delete", "Delete", new { id = Model.Id }, new { id = "deleteLink", onclick = "return confirm(\"Are you sure you want to delete this event?\");" })
	}
}

@Helpers.ValidationSymmaryPanel("Unable to save properties.")

<form method="POST" data-bind="submit: submit" enctype="multipart/form-data">
	@Html.HiddenFor(m => m.Id)

	@Helpers.SaveAndBackBtn(backAction)

	<div>
		<div class="editor-label">
			Event type
		</div>
		<div class="editor-field">
			<label>
				<input type="radio" data-bind="checked: isSeriesEventStr" value="true" />
				Series event
			</label>
			<label>
				<input type="radio" data-bind="checked: isSeriesEventStr" value="false" />
				Standalone event
			</label>
		</div>
	</div>

	<div data-bind="visible: isSeriesEvent()">

		<div class="editor-label">
			Series
		</div>
		<div class="editor-field">
			@KnockoutHelpers.LockingAutoComplete("releaseEventSeriesAutoComplete", "series.entry", "series.name")
			@Html.HiddenForKnockout(m => m.Series, "value: ko.toJSON(series)")
		</div>

		<div class="editor-label">
			@Html.LabelFor(m => m.SeriesNumber)
		</div>
		<div class="editor-field">
			@Html.TextBoxFor(m => m.SeriesNumber, new { size = 20 })<br />
			@Html.ValidationMessageFor(m => m.SeriesNumber)
		</div>

		<div class="editor-label">

		</div>
		<div class="editor-field">
			<label>
				<input type="checkbox" data-bind="initialValue, checked: customName" @(Model.CustomName ? "checked" : "") />
				Customize event name
			</label>
			@Html.HiddenForKnockout(m => m.CustomName, "value: customName")
		</div>
		
		<div data-bind="visible: !customName()">
			<div class="editor-label">
				@Html.LabelFor(m => m.SeriesSuffix)
			</div>
			<div class="editor-field">
				@Html.TextBoxFor(m => m.SeriesSuffix, new { size = 20 })<br />
			</div>
		</div>
	</div>
	
	<div data-bind="visible: !isSeriesEvent() || customName()">
		<div class="editor-label">
			@Html.LabelFor(m => m.Name)
		</div>
		<div class="editor-field">
			@Html.TextBoxFor(m => m.Name, new { size = 40, @class = "span3", maxlength = 50 })<br />
			@Html.ValidationMessageFor(m => m.Name)
		</div>
	</div>

	<div class="editor-label">
		@Html.LabelFor(m => m.Description)
	</div>
	<div class="editor-field">
		@Html.TextAreaForKnockout(m => m.Description, "initialValue, textInput: description", cols: 60, rows: 4, @cssClass: "span4", maxLength: 400)

		Live preview
		<div data-bind="markdown: description"></div>
	</div>

	<div class="editor-label">
		@Html.LabelFor(m => m.Date)
	</div>
	<div class="editor-field">
		<input type="text" data-bind="datepicker: { value: date, dateFormat: 'yy-mm-dd' }" class="span2" maxlength="10" />
		@Html.HiddenForKnockout(m => m.Date, "value: ko.toJSON(dateStr)")
		@Html.ValidationMessageFor(m => m.Date)
	</div>

	<div class="editor-label">
		@Helpers.HelpLabel("Setlist", "If this event is a live performance such as concert or club event, a setlist of the songs performed can be specified here.")
	</div>
	<div class="editor-field">
		@KnockoutHelpers.BasicEntryLinkLockingAutoComplete("songListAutoComplete", "songList", "songListCategory: 'Concerts'")
		@Html.HiddenForKnockout(m => m.SongList, "value: ko.toJSON(songList.entry())")
	</div>
	
	<div>
		<div class="editor-label">
			@Helpers.HelpLabel("Venue", "Can be either a physical location such as concert hall, or a virtual location (website).")
		</div>
		<div class="editor-field">
			@Html.TextBoxFor(m => m.Venue, new { size = 40, @class = "span3", maxlength = 1000 })<br />
		</div>
	</div>
	
	<div class="editor-label">
		<label>Picture</label>
	</div>
	<div class="editor-field">
		<table>
			<tr>
				<td>
					<img src="@Url.ImageThumb(Model, VocaDb.Model.Domain.Images.ImageSize.SmallThumb)" alt="Picture" class="coverPic" />
				</td>
				<td>
					<p>@string.Format("Allowed types: {0}. Maximum size is {1} MB.", string.Join(", ", ImageHelper.AllowedExtensions), ImageHelper.MaxImageSizeMB)</p>
					<input type="file" id="pictureUpload" name="pictureUpload" />
				</td>
			</tr>
		</table>
	</div>

	<div class="editor-label">
		<label class="helpTip" data-bind="qTip: null" title="@EditRes.ExternalLinksQuickHelp">
			@EditRes.WebLinks
		</label>
	</div>
	<div class="editor-field" data-bind="with: webLinks">
		@KnockoutHelpers.WebLinksEditViewKnockout(false)
		@Html.HiddenForKnockout(m => m.WebLinks, "value: ko.toJSON(webLinks)")
	</div>

	<br />
	@Helpers.SaveAndBackBtn(backAction)

</form>

@section BodyScripts {
@Scripts.Render("~/bundles/shared/edit", "~/bundles/ReleaseEvent/Edit")
<script type="text/javascript">
	$(function () {

		var contract = @ToJS(new { Model.Date, Model.Series, Model.SongList, Model.WebLinks });
		var vm = new vdb.viewModels.releaseEvents.ReleaseEventEditViewModel(contract);
		ko.applyBindings(vm);

		initPage();

	});
</script>
}