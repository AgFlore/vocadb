@using System.Web.Optimization
@using VocaDb.Model.Domain.Images
@using VocaDb.Model.Domain.Security
@using VocaDb.Web.Helpers;
@using Res = ViewRes.Event.DetailsStrings;
@using EntryRes = ViewRes.EntryDetailsStrings;
@inherits VocaDb.Web.Code.VocaDbPage<VocaDb.Model.DataContracts.ReleaseEvents.ReleaseEventDetailsContract>

@{

	ViewBag.Parents = new[] {
		Html.ActionLink(ViewRes.SharedStrings.ReleaseEvents, "Index")
	};

	var descriptionHtml = MarkdownParser.GetHtml(Model.Description);
	var descriptionStripped = MarkdownParser.GetPlainText(Model.Description);

	PageProperties.Description = descriptionStripped;

	var pictureData = !string.IsNullOrEmpty(Model.PictureMime) ? (IEntryImageInformation)Model: Model.Series;
	var smallThumbUrl = Url.ImageThumb(pictureData, VocaDb.Model.Domain.Images.ImageSize.SmallThumb);
	var fullImageUrl = Url.ImageThumb(pictureData, VocaDb.Model.Domain.Images.ImageSize.Original);

}

@section Head {
	@HtmlHelpers.OpenGraphMetaTags(PageProperties)
	<link rel="canonical" href="@PageProperties.CanonicalUrl" />
}

@section Toolbar {
	@Html.ActionLink(ViewRes.SharedStrings.Edit, "Edit", new { id = Model.Id }, new { id = "editEventLink", @class = (Login.CanManageDb ? "" : "disabled") })
	@Html.ActionLink(ViewRes.EntryDetailsStrings.ViewModifications, "Versions", new { id = Model.Id }, new { id = "viewVersions" })
}

<div class="media">
	@if (pictureData != null && !string.IsNullOrEmpty(pictureData.Mime)) {
		<a class="pull-left" href="@fullImageUrl">
			<img class="media-object" src="@smallThumbUrl" alt="Thumb" />
		</a>
	}
	<div class="media-body">
		
		@if (Model.Series != null) {
			<p>@Res.Series: @Html.ActionLink(Model.Series.Name, "SeriesDetails", new { id = Model.Series.Id })</p>
		}

		@if (Model.Date != null) {
			<p>@Res.OccurrenceDate: @Model.Date.Value.ToShortDateString()</p>
		}
		
		@if (!string.IsNullOrEmpty(Model.Venue)) {
			<p>@Res.Venue: @Model.Venue</p>
		}

		@if (!string.IsNullOrEmpty(Model.Description)) {
			<p>@Html.Raw(descriptionHtml)</p>
		}
		
		@if (Model.WebLinks.Any()) {
			@EntryDetailsHelpers.ExternalLinksList(Model.WebLinks, false)
			<br />
		}		
	</div>
</div>

@if (Model.SongList != null) {
	<h3 class="withMargin">@Res.SongList: @Html.ActionLink(Model.SongList.Name, "Details", "SongList", new { id = Model.SongList.Id }, null)</h3>
	if (Model.SongListSongs.Any()) {
		<table class="table">
			@foreach (var song in Model.SongListSongs) {
				<tr>
					<td style="width: 50px"><h1>@song.Order</h1></td>
					<td style="width: 75px">@SongHelpers.SongIconLink(song.Song)</td>
					<td>
						@SongHelpers.SongLink(song.Song)
						<br />
						<small class="extraInfo">@song.Song.ArtistString</small>
					</td>
				</tr>
			}
		</table>
	}
}

@if (Model.Albums.Any()) {
	<h3>
		@Res.Albums
		<small>@string.Format(EntryRes.NumTotalParenthesis, Model.Albums.Length)</small>
	</h3>
	@AlbumHelpers.AlbumGrid(Model.Albums, 2, false, false, true)
}

@if (Model.Songs.Any()) {
	<h3 class="withMargin">
		@Res.Songs
		<small>@string.Format(EntryRes.NumTotalParenthesis, Model.Songs.Length)</small>
	</h3>
	@SongHelpers.SongGrid(Model.Songs, 2, true, false)
}

<h3 data-bind="visible: loggedUserId || usersAttending().length" class="withMargin">@Res.Attending</h3>

@if (Login.IsLoggedIn) {
	<div class="btn-group" data-bind="visible: hasEvent">
		<button class="btn dropdown-toggle" data-toggle="dropdown">
			<span data-bind="visible: isEventAttending">@Res.UserAttending</span>
			<span data-bind="visible: isEventInterested">@Res.UserInterested</span>
			<span class="caret"></span>
		</button>
		<ul class="dropdown-menu">
			<li><a data-bind="click: removeEvent" href="#">@Res.RemoveAttendance</a></li>
			<li><a data-bind="click: setEventAttending, visible: isEventInterested" href="#">@Res.UserAttending</a></li>
			<li><a data-bind="click: setEventInterested, visible: isEventAttending" href="#">@Res.UserInterested</a></li>
		</ul>
	</div>	
	<div class="btn-group" data-bind="visible: !hasEvent()">
		<button data-bind="click: setEventAttending" class="btn">@Res.UserAttending</button>		
		<button data-bind="click: setEventInterested" class="btn">@Res.UserInterested</button>		
	</div>
}

<div data-bind="visible: usersAttending().length" class="withMargin">
	<ul>
		<li data-bind="foreach: usersAttending()">
			@UserHelpers.IconAndNameLinkKnockout()
		</li>
	</ul>
</div>

@CommentHelpers.LatestCommentsKnockout()

@section BodyScripts {
@Scripts.Render("~/bundles/ReleaseEvent/Details")
<script type="text/javascript">
	$(function () {
		$("#editEventLink").button({ disabled: $("#editEventLink").hasClass("disabled"), icons: { primary: 'ui-icon-wrench'} });
		$("#viewVersions").button({ icons: { primary: 'ui-icon-clock' } });

		var loggedUserId = @UserContext.LoggedUserId;
		var urlMapper = new vdb.UrlMapper('@UrlMapper.HostAddress');
		var userRepo = new vdb.repositories.UserRepository(urlMapper, loggedUserId);
		var latestComments = @ToJS(Model.LatestComments);
		var users = @ToJS(Model.UsersAttending);
		var canDeleteAllComments = @ToJS(UserContext.HasPermission(PermissionToken.DeleteComments));

		var vm = new vdb.viewModels.releaseEvents.ReleaseEventDetailsViewModel(urlMapper, userRepo, latestComments, loggedUserId, @Model.Id, @ToJS((int?)Model.EventAssociationType), users, canDeleteAllComments);
		ko.applyBindings(vm);
	});
</script>
}