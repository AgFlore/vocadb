@using System.Web.Optimization
@using Resources
@using VocaDb.Web.Code
@using VocaDb.Web.Helpers
@using Res = ViewRes.Search.IndexStrings;
@using SharedRes = ViewRes.SharedStrings;
@inherits VocaDbPage<VocaDb.Web.Models.Search.SearchIndexViewModel>

@section Head {
	<link rel="stylesheet" href="@Url.Content("~/Content/Styles/songlist.css")" type="text/css" />
}

<ul class="nav nav-pills">
	<li data-bind="css: { active: searchType() == 'Anything' }">
		<a href="#" data-bind="click: function() { searchType('Anything'); }">@EntryTypeNames.Undefined</a>
	</li>
	<li data-bind="css: { active: searchType() == 'Artist' }">
		<a href="#" data-bind="click: function() { searchType('Artist'); }">@ViewRes.SharedStrings.Artists</a>
	</li>
	<li data-bind="css: { active: searchType() == 'Album' }">
		<a href="#" data-bind="click: function() { searchType('Album'); }">@ViewRes.SharedStrings.Albums</a>
	</li>
	<li data-bind="css: { active: searchType() == 'Song' }">
		<a href="#" data-bind="click: function() { searchType('Song'); }">@ViewRes.SharedStrings.Songs</a>
	</li>
	<li data-bind="css: { active: searchType() == 'Tag' }">
		<a href="#" data-bind="click: function() { searchType('Tag'); }">@ViewRes.SharedStrings.Tags</a>
	</li>
</ul>

<div id="anythingSearchTab" class="form-horizontal well well-transparent">

	<div class="pull-right">
		@SearchDropDown("showArtistSearch", "artistSearchViewModel", Translate.ArtistSortRuleNames.ValuesAndNamesStrings)
		@SearchDropDown("showAlbumSearch", "albumSearchViewModel", Translate.AlbumSortRuleNames.ValuesAndNamesStrings)
		@SearchDropDown("showSongSearch", "songSearchViewModel", Translate.SongSortRuleNames.ValuesAndNamesStrings)

		<div class="inline-block" data-bind="visible: showAlbumSearch(), with: albumSearchViewModel">
			<div class="btn-group">
				<a data-bind="css: { active: viewMode() == 'Details' }, click: function() { viewMode('Details'); }" class="btn btn-nomargin" href="#" title="@Res.AlbumDetails">
					<i class="icon-list"></i>
				</a>
				<a data-bind="css: { active: viewMode() == 'Tiles' }, click: function() { viewMode('Tiles'); }" class="btn btn-nomargin" href="#" title="@Res.AlbumTiles">
					<i class="icon-th"></i>
				</a>
			</div>
		</div>

		<div class="inline-block" data-bind="visible: showSongSearch(), with: songSearchViewModel">
			<div class="btn-group">
				<a data-bind="css: { active: viewMode() == 'Details' }, click: function() { viewMode('Details'); }" class="btn btn-nomargin" href="#" title="@Res.AlbumDetails">
					<i class="icon-th-list"></i>
				</a>
				<a data-bind="css: { active: viewMode() == 'PlayList' }, click: function() { viewMode('PlayList'); }" class="btn btn-nomargin" href="#" title="@Res.Playlist">
					<i class="icon-list"></i>
				</a>
			</div>
		</div>

		<div class="inline-block" data-bind="visible: showTagFilter()">
			<a data-bind="css: { active: showTags() }, click: function() { showTags(!showTags()); }" class="btn btn-nomargin" href="#" title="@Res.ShowTags">
				<i class="icon-tags"></i>
			</a>
		</div>

	</div>

	<div class="control-label">
		<i class="icon-search"></i>
	</div>
	<div class="control-group">
		<div class="controls">
			<div class="input-append">
				<input type="text" data-bind="textInput: searchTerm" class="input-xlarge" placeholder="@Res.TypeSomething" />
				<button class="btn btn-danger" data-bind="click: function() { searchTerm(''); }, visible: searchTerm">@SharedRes.Clear</button>
				&nbsp;
			</div>
			<button class="btn" data-bind="click: function() { showAdvancedFilters(!showAdvancedFilters()); }, css: { active: showAdvancedFilters }">
				@Res.MoreFilters
				<span class="caret"></span>
			</button>
		</div>
	</div>

	<div data-bind="visible: showAdvancedFilters" style="display: none;">
		<!-- Tag filtering with top genres -->
		<div class="control-group" data-bind="visible: showTagFilter">
			<div class="control-label">@ViewRes.SharedStrings.Tag</div>
			<div class="controls">
				<!-- ko foreach: tags -->
					<div class="control-group">
						<div style="display: inline-block;" class="input-append input-prepend">
							<a href="#" class="btn btn-nomargin" data-bind="attr: { href: vdb.utils.EntryUrlMapper.details_tag(id, urlSlug()) }">
								<i class="icon icon-info-sign"></i>
							</a>
							<div class="input-append">
								<input type="text" class="input-large" readonly data-bind="value: name" />
								<button type="button" class="btn btn-danger" data-bind="click: function() { $parent.tags.remove($data); }">Clear</button>
							</div>
						</div>
					</div>				
				<!-- /ko -->
				
				<div data-bind="visible: tags().length">
					<label class="checkbox">
						<input type="checkbox" data-bind="checked: childTags" />
						@Res.ChildTags
					</label>
				</div>

				<div>
					
					<input type="text" class="input-large" data-bind="tagAutoComplete: addTag" placeholder="@ViewRes.SharedStrings.Search" />
					
					<div class="btn-group">
						<button class="btn dropdown-toggle btn-nomargin" data-toggle="dropdown">
							@Res.TopGenres
							<span class="caret"></span>
						</button>
						<ul data-bind="foreach: genreTags" class="dropdown-menu" role="menu" aria-labelledby="dropdownMenu">
							<li>
								<a href="#" data-bind="attr: { href: vdb.utils.EntryUrlMapper.details_tag_contract($data) }, text: name, click: function(selectedTag) { $parent.addTag(selectedTag); }"></a>
							</li>
						</ul>
					</div>

				</div>			

			</div>
		</div>

		<!-- Artist search options -->
		<div data-bind="visible: showArtistSearch, with: artistSearchViewModel">
			<div class="control-group">
				<div class="control-label">@Res.ArtistType</div>
				<div class="controls">
					@ArtistHelpers.ArtistTypesDropdownKnockout("artistType")
				</div>
			</div>
		</div>

		<!-- Album search options -->
		<div data-bind="visible: showAlbumSearch, with: albumSearchViewModel">
			<div class="control-group">
				<div class="control-label">@Res.AlbumType</div>
				<div class="controls">
					@AlbumHelpers.DiscTypesDropdownKnockout("albumType")
				</div>
			</div>

			<div class="control-group">
				<div class="control-label">@EntryTypeNames.Artist</div>
				<div class="controls" data-bind="with: artistFilters">
					@KnockoutHelpers.ArtistFilters(artistParticipationStatus: true)
				</div>
			</div>
		</div>

		@{ Html.RenderPartial("Partials/_SongSearchOptions"); }

		<!-- Tag search options -->
		<div class="control-group" data-bind="visible: showTagSearch, with: tagSearchViewModel">
			<div class="control-label">@Res.TagCategory</div>
			<div class="controls">
				<div class="input-append">
					@KnockoutHelpers.LockingAutoComplete("tagCategoryAutoComplete", "categoryName", extraBindings: "clearValue: true")
				</div>
			</div>
		</div>

		<div class="control-group">
			<div class="controls">
				
				<div data-bind="visible: showArtistSearch, with: artistSearchViewModel">
					<label class="checkbox" data-bind="visible: canHaveChildVoicebanks">
						<input type="checkbox" data-bind="checked: onlyRootVoicebanks" />
						Only voicebanks with no parents
					</label>

					<label class="checkbox" data-bind="visible: loggedUserId">
						<input type="checkbox" data-bind="checked: onlyFollowedByMe" />
						@Res.OnlyMyFollowedArtists
					</label>
				</div>

				<div data-bind="visible: showSongSearch, with: songSearchViewModel">
					<label class="checkbox">
						<input type="checkbox" data-bind="checked: pvsOnly" />
						@Res.OnlyWithPVs
					</label>

					<label class="checkbox" data-bind="visible: loggedUserId">
						<input type="checkbox" data-bind="checked: onlyRatedSongs" />
						@Res.InMyCollection
					</label>
				</div>

				<label class="checkbox" data-bind="visible: showDraftsFilter">
					<input type="checkbox" data-bind="checked: draftsOnly" />
					@ViewRes.EntryIndexStrings.OnlyDrafts
				</label>

			</div>
		</div>

	</div>

</div>

@{ Html.RenderPartial("Partials/_AnythingSearchList"); }

@{ Html.RenderPartial("Partials/_ArtistSearchList"); }

<div data-bind="visible: showAlbumSearch, with: albumSearchViewModel">
	@{ Html.RenderPartial("Partials/_AlbumSearchList"); }
</div>

<div data-bind="visible: showSongSearch, with: songSearchViewModel">
	@{ Html.RenderPartial("Partials/_SongSearchList"); }
</div>

@{ Html.RenderPartial("Partials/_TagSearchList"); }


<!-- Scripts -->
@section BodyScripts {
	@Scripts.Render("~/bundles/Search/Index")
	<script type="text/javascript" src="https://www.youtube.com/iframe_api"></script>

	<script type="text/javascript">

		$(document).ready(function () {

			var cultureCode = '@UICulture';
			var languageSelection = '@UserContext.LanguagePreference';
			var query = @Html.Raw(JsonHelpers.Serialize(Model.Filter));
			var tagIds = @ToJS(Model.TagId);
			var searchType = '@Model.SearchTypeName';
			var sort = '@Model.Sort';
			var artistId = @ToJS(Model.ArtistId);
			var childVoicebanks = @ToJS(Model.ChildVoicebanks);
			var artistType = '@Model.ArtistType';
			var discType = '@Model.DiscType';
			var songType ='@Model.SongType';
			var onlyWithPVs = @ToJS(Model.OnlyWithPVs);
			var onlyRatedSongs = @ToJS(Model.OnlyRatedSongs);
			var since = @ToJS(Model.Since);
			var minScore = @ToJS(Model.MinScore);
			var viewMode = '@Model.ViewMode';
			var autoplay = @ToJS(Model.Autoplay);
			var shuffle = @ToJS(Model.Shuffle);
			var pageSize = @ToJS(Model.PageSize);
			var loggedUserId = @ToJS(Login.Manager.LoggedUserId);
			var unknownPictureUrl = '@Url.Content("~/Content/unknown.png")';

			var rootPath = '@RootPath';
			var urlMapper = new vdb.UrlMapper(rootPath);
			var repoFactory = new vdb.repositories.RepositoryFactory(urlMapper, @LanguagePreferenceInt, loggedUserId);
			var resourceRepo = repoFactory.resourceRepository();
			var entryRepo = repoFactory.entryRepository();
			var artistRepo = repoFactory.artistRepository();
			var albumRepo = repoFactory.albumRepository();
			var songRepo = repoFactory.songRepository();
			var tagRepo = repoFactory.tagRepository();
			var userRepo = repoFactory.userRepository();
			var pvPlayerElem = $("#pv-player-wrapper")[0];
			var pvPlayersFactory = new vdb.viewModels.pvs.PVPlayersFactory(pvPlayerElem);

			var vm = new vdb.viewModels.search.SearchViewModel(urlMapper, entryRepo, artistRepo, albumRepo, songRepo, tagRepo, resourceRepo,
				userRepo,
				unknownPictureUrl,
				languageSelection, loggedUserId, cultureCode, searchType, query, tagIds, sort,
				artistId,
				childVoicebanks,
				artistType, discType, songType,
				onlyWithPVs,
				onlyRatedSongs,
				since,
				minScore,
				viewMode,
				autoplay,
				shuffle,
				pageSize,
				pvPlayersFactory);
			ko.applyBindings(vm);

		});


	</script>

}

@helper SearchDropDown(string visibleBinding, string viewModel, Dictionary<string, string> sortRules) {
	@:@KnockoutHelpers.SearchDropDown(visibleBinding, viewModel, sortRules)
}